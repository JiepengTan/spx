// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"fmt"
	"github.com/goplus/spx"
	"math"
)

const _ = true

type Red struct {
	spx.SpriteImpl
	*Game
}
type SpControl struct {
	spx.SpriteImpl
	*Game
}
type Game struct {
	spx.Game
	hasTestDone        bool
	hasInputKey        bool
	hasClicked         bool
	hasChangedBackdrop bool
	hasReceivedMsgA    bool
	hasReceivedMsgB    bool
	SpControl          SpControl
	Red                Red
	cloneNum           int
}
//line demos/00_Test/main.spx:20:1
func (this *Game) doPanic(msg string) {
//line demos/00_Test/main.spx:21:1
	fmt.Println("panic error: ", msg)
}
//line demos/00_Test/main.spx:24:1
func (this *Game) assert(val bool, msg string, args ...interface{}) {
//line demos/00_Test/main.spx:25:1
	if !val {
//line demos/00_Test/main.spx:26:1
		this.doPanic(fmt.Sprintf(msg, args...))
	}
}
//line demos/00_Test/main.spx:30:1
func (this *Game) assertFloat(val float64, expect float64, msg string, args ...interface{}) {
//line demos/00_Test/main.spx:31:1
	if math.Abs(val-expect) > 0.001 {
//line demos/00_Test/main.spx:32:1
		this.doPanic(fmt.Sprintf("Value (%v) not equal to %v :: ", val, expect) + fmt.Sprintf(msg, args...))
	}
}
//line demos/00_Test/main.spx:36:1
func (this *Game) assertPosWithErr(p spx.Sprite, x float64, y float64, err float64, msg string, args ...interface{}) {
//line demos/00_Test/main.spx:37:1
	if math.Abs(x-p.Xpos()) > err || math.Abs(y-p.Ypos()) > err {
//line demos/00_Test/main.spx:38:1
		this.doPanic(fmt.Sprintf("Pos (%v %v) not equal to %v %v :: ", p.Xpos(), p.Ypos(), x, y) + fmt.Sprintf(msg, args...))
	}
}
//line demos/00_Test/main.spx:42:1
func (this *Game) assertPos(p spx.Sprite, x float64, y float64, msg string, args ...interface{}) {
//line demos/00_Test/main.spx:43:1
	this.assertPosWithErr(p, x, y, 0.001, msg, args...)
}
//line demos/00_Test/main.spx:46:1
func (this *Game) assertDir(p spx.Sprite, dir float64, msg string, args ...interface{}) {
//line demos/00_Test/main.spx:47:1
	if math.Abs(dir-p.Heading()) > 0.001 {
//line demos/00_Test/main.spx:48:1
		this.doPanic(fmt.Sprintf("Heading (%v) not equal to %v :: ", p.Heading(), dir) + fmt.Sprintf(msg, args...))
	}
}
//line demos/00_Test/main.spx:52:1
func (this *Game) onTestStart(p spx.Sprite) {
//line demos/00_Test/main.spx:53:1
	p.SetXYpos(0, 0)
//line demos/00_Test/main.spx:54:1
	p.Say__1(p.Name(), 1)
}
//line demos/00_Test/main.spx:57:1
func (this *Game) onTestDone(p spx.Sprite) {
//line demos/00_Test/main.spx:58:1
	p.Hide()
//line demos/00_Test/main.spx:59:1
	this.hasTestDone = true
}
//line demos/00_Test/main.spx:63:1
func (this *Game) waitAndTest(msg string) {
//line demos/00_Test/main.spx:64:1
	for !this.hasTestDone {
		spx.Sched()
//line demos/00_Test/main.spx:65:1
		this.WaitNextFrame()
	}
//line demos/00_Test/main.spx:67:1
	fmt.Println("waitAndTest ", msg)
//line demos/00_Test/main.spx:68:1
	this.hasTestDone = false
//line demos/00_Test/main.spx:69:1
	this.Broadcast__0(msg)
}
//line demos/00_Test/main.spx:72
func (this *Game) MainEntry() {
	println("MainEntry")
	println("--------MainEntry-------")
//line demos/00_Test/main.spx:72:1
	this.OnStart(func() {
//line demos/00_Test/main.spx:73:1
		fmt.Println("aaa1111")
//line demos/00_Test/main.spx:74:1
		this.hasTestDone = true
//line demos/00_Test/main.spx:75:1
		fmt.Println("aaa")
//line demos/00_Test/main.spx:76:1
		this.waitAndTest("testControl")
//line demos/00_Test/main.spx:77:1
		fmt.Println("bbb")
//line demos/00_Test/main.spx:78:1
		this.waitAndTest("testEvent")
//line demos/00_Test/main.spx:79:1
		this.waitAndTest("testLook")
//line demos/00_Test/main.spx:80:1
		this.waitAndTest("testMotion")
//line demos/00_Test/main.spx:81:1
		this.waitAndTest("testOperator")
//line demos/00_Test/main.spx:82:1
		this.waitAndTest("testPen")
//line demos/00_Test/main.spx:83:1
		this.waitAndTest("testSound")
//line demos/00_Test/main.spx:84:1
		this.waitAndTest("testVariable")
//line demos/00_Test/main.spx:85:1
		this.waitAndTest("testEffect")
//line demos/00_Test/main.spx:86:1
		this.waitAndTest("testUnique")
//line demos/00_Test/main.spx:87:1
		this.waitAndTest("testSensing")
	})
}
func (this *Game) Main() {
	_gop_obj0 := &Red{Game: this}
	_gop_obj1 := &SpControl{Game: this}
	spx.Gopt_Game_Main(this, _gop_obj0, _gop_obj1)
}
//line demos/00_Test/Red.spx:1
func (this *Red) Main() {
//line demos/00_Test/Red.spx:1:1
	this.OnStart(func() {
//line demos/00_Test/Red.spx:2:1
		fmt.Println("onStart1")
//line demos/00_Test/Red.spx:3:1
		this.Say__0("Hi")
//line demos/00_Test/Red.spx:4:1
		fmt.Println("onStart2")
	})
//line demos/00_Test/Red.spx:7:1
	this.OnKey__0(spx.KeyUp, func() {
//line demos/00_Test/Red.spx:8:1
		this.Camera.ChangeXYpos(0, 10)
	})
//line demos/00_Test/Red.spx:11:1
	this.OnKey__0(spx.KeyDown, func() {
//line demos/00_Test/Red.spx:12:1
		this.Camera.ChangeXYpos(0, -10)
	})
//line demos/00_Test/Red.spx:15:1
	this.OnKey__0(spx.KeyLeft, func() {
//line demos/00_Test/Red.spx:16:1
		this.Camera.ChangeXYpos(-10, 0)
	})
//line demos/00_Test/Red.spx:19:1
	this.OnKey__0(spx.KeyRight, func() {
//line demos/00_Test/Red.spx:20:1
		this.Camera.ChangeXYpos(10, 0)
	})
}
//line demos/00_Test/SpControl.spx:4
func (this *SpControl) Main() {
//line demos/00_Test/SpControl.spx:4:1
	this.OnMsg__1("testControl", func() {
//line demos/00_Test/SpControl.spx:5:1
		this.onTestStart(this)
//line demos/00_Test/SpControl.spx:7:1
		// 1. Test repeat execution
		var count int
//line demos/00_Test/SpControl.spx:9:1
		for
//line demos/00_Test/SpControl.spx:9:1
		i := 0; i <= 5;
//line demos/00_Test/SpControl.spx:9:1
		i++ {
			spx.Sched()
//line demos/00_Test/SpControl.spx:10:1
			count++
		}
//line demos/00_Test/SpControl.spx:12:1
		this.assert(count == 6, "Repeat execution test failed")
//line demos/00_Test/SpControl.spx:14:1
		// 2. Test infinite loop
		var loopCount = 0
//line demos/00_Test/SpControl.spx:16:1
		for {
			spx.Sched()
//line demos/00_Test/SpControl.spx:17:1
			loopCount++
//line demos/00_Test/SpControl.spx:18:1
			if loopCount >= 10 {
//line demos/00_Test/SpControl.spx:19:1
				break
			}
		}
//line demos/00_Test/SpControl.spx:22:1
		this.assert(loopCount == 10, "Infinite loop test failed")
//line demos/00_Test/SpControl.spx:24:1
		// 3. Test conditional statements
		var testValue = 10
//line demos/00_Test/SpControl.spx:26:1
		if testValue > 5 {
//line demos/00_Test/SpControl.spx:27:1
			this.assert(true, "If condition test failed")
		} else {
//line demos/00_Test/SpControl.spx:29:1
			this.assert(false, "If condition test failed")
		}
//line demos/00_Test/SpControl.spx:33:1
		if testValue < 5 {
//line demos/00_Test/SpControl.spx:34:1
			this.assert(false, "If-else condition test failed")
		} else {
//line demos/00_Test/SpControl.spx:36:1
			this.assert(true, "If-else condition test failed")
		}
//line demos/00_Test/SpControl.spx:39:1
		this.onTestDone(this)
	})
}
func main() {
	println("aaaasdgsgsg")
	new(Game).Main()
}
