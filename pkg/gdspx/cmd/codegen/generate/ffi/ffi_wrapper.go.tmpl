/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package ffi

//revive:disable

// #include "gdextension_spx_codegen_header.h"
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"

// C type aliases
// enums
{{ range $i, $e := $view.CollectEnums -}}
type {{ $e.Name }} C.{{ $e.Name }}
const (
	{{ range $j, $v := $e.Values -}}
	{{ $v.Name }} {{ if eq $j 0 }}{{ $e.Name }}{{ end }} {{ with $z := (goEnumValue $v $j) -}} = {{ $z }} {{- end }}
	{{ end -}}
)
{{ end }}

// C function aliases
{{ range $i, $f := $view.CollectFunctions -}}
type {{ $f.Name }} C.{{ $f.Name }}
{{ end }}

// call gdextension interface functions
{{- range $i, $f := $view.CollectGDExtensionInterfaceFunctions -}}
{{ $rt := goReturnType .ReturnType }}
func Call{{ trimPrefix $f.Name "GDExtensionSpx" }}(
	{{ range $j, $arg := $f.Arguments -}}
		{{ if $arg.Name -}}
		{{ $arg.Name -}}
		{{ else if and $arg.Type.Function $arg.Type.Function.Name -}}
		{{ $arg.Type.Function.Name -}}
		{{ else -}}
		inArg{{ add $j 1 -}}
		{{ end }} {{ if $arg.Type.Primative }}{{ goArgumentType $arg.Type.Primative $arg.Name }}{{ else }} unsafe.Pointer{{ end }},
	{{ end -}}
) {{ $rt }} {
	arg0 := (C.{{ $f.Name }})(api.{{ trimPrefix $f.Name "GDExtension" }})
	{{ range $j, $arg := $f.Arguments -}}
		arg{{ add $j 1 }}{{$arg.Type.Primative.Name}} = {{ cgoCastArgument $arg (print "inArg" (add $j 1)) }}
	{{ end -}}

	{{- if $rt -}} var ret_val C.{{ $f.ReturnType.CStyleString }} {{ end }}
	C.cgo_callfn_{{ $f.Name }}(arg0,
		{{- range $j, $arg := $f.Arguments -}}
			arg{{ add $j 1 }}{{$arg.Type.Primative.Name}},
		{{- end -}}
		{{ if $rt }} &ret_val{{ end -}}
	)
	{{- range $j, $arg := $f.Arguments -}}
		{{ cgoCleanUpArgument $arg (add $j 1) }}
	{{ end -}}

	{{- if $rt }}
	return {{ cgoCastReturnType $f.ReturnType "ret_val" }}
	{{- end }}
}
{{- end -}}
